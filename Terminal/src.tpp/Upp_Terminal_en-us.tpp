topic "TerminalCtrl";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[b42;a42;2 $$10,10#45413000475342174754091244180557:text]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%EN-US 
[ {{10000@(113.42.0) [s0; [*@7;4 TerminalCtrl]]}}&]
[s0;%- &]
[s1;:Upp`:`:TerminalCtrl`:`:class:%- [@(0.0.255)3 class][3 _][*3 TerminalCtrl][3 _:_][@(0.0.255)3 p
ublic][3 _][*@3;3 Ctrl]&]
[s0;%- &]
[s2; 
@@image:2337&1937
()
&]
[s0; &]
[s2; This class implements a 24`-bit color virtual terminal emulator 
ctrl (emmbeddable vt widget) compatible with DEC VT series and 
xterm. It supports xterm`-style mouse tracking, inline images, 
hyperlinks, shell integration, progress notification, annotations, 
window reports and window events. See [^topic`:`/`/Terminal`/srcdoc`/Terminal`_Spec`_en`-us`#0^ t
erminal specs `& capabilities document] for supported modes and 
VT sequences.&]
[s3;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Public Method List]]}}&]
[s3; &]
[s0;%- enum_[* ConformanceLevels]&]
[s2;b17;a17; Constants used in device emulation level settings.&]
[s7;i1120;a17;:TerminalCtrl`:`:LEVEL`_0:~~~.1408~576; [%-*C@3 LEVEL`_0]-|VT52 
mode..&]
[s7;i1120;a17;:TerminalCtrl`:`:LEVEL`_1: [%-*C@3 LEVEL`_1]-|VT1xx mode.&]
[s7;i1120;a17;:TerminalCtrl`:`:LEVEL`_2: [%-*C@3 LEVEL`_2]-|VT2xx mode.&]
[s7;i1120;a17;:TerminalCtrl`:`:LEVEL`_3: [%-*C@3 LEVEL`_3]-|VT3xx mode.&]
[s7;i1120;a17;:TerminalCtrl`:`:LEVEL`_4: [%-*C@3 LEVEL`_4]-|VT4xx mode. 
(Default)&]
[s2; See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:SetLevel`(int`)^ S
etLevel()] method.&]
[s3; &]
[s4; &]
[s0;%- enum_[* LEDs]&]
[s2;b17;a17; Constans used in DEC VT100 keyboard led emulation.&]
[s7;i1120;a17;:TerminalCtrl`:`:LED`_NUMLOCK: [%-*C@3 LED`_NUMLOCK]-|Numlock 
 toggled.&]
[s7;i1120;a17;:TerminalCtrl`:`:LED`_CAPSLOCK: [%-*C@3 LED`_CAPSLOCK]-|Capslock 
toggled.&]
[s7;i1120;a17;:TerminalCtrl`:`:LED`_SCRLOCK: [%-*C@3 LED`_SCRLOCK]-|ScrLock 
toggled.&]
[s7;i1120;a17;:TerminalCtrl`:`:LED`_ALL: [%-*C@3 LED`_ALL]-|All locks 
are toggled.&]
[s2; See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenLED^ W
henLED] event.&]
[s3; &]
[s4; &]
[s0;%- enum_[* ProgressState]&]
[s2;b17;a17; Constants used for ConEmu`'s progress notification protocol.&]
[s7;i1120;a17;:TerminalCtrl`:`:PROGRESS`_OFF: [*C@3 PROGRESS`_OFF]-|Stops 
the progress.&]
[s7;i1120;a17;:TerminalCtrl`:`:PROGRESS`_NORMAL: [*C@3 PROGRESS`_NORMAL]-|Sets 
the progress to a given value (percent).&]
[s7;i1120;a17;:TerminalCtrl`:`:PROGRESS`_ERROR: [*@3 PROGRESS`_ERROR]-|Sets 
the progress state to error (with an optional value).&]
[s7;i1120;a17;:TerminalCtrl`:`:PROGRESS`_WARNING: [*@3 PROGRESS`_WARNING]-|Sets 
the progress state to warning (with an optional value).&]
[s7;i1120;a17;:TerminalCtrl`:`:PROGRESS`_BUSY: [*@3 PROGRESS`_BUSY]-|Sets 
the progress to busy (indeterminate) or scan mode.&]
[s0; &]
[s4; &]
[s0;%- enum_[* Colors]&]
[s0;l288;b17;a17; Constanst used as indices for ANSI colors, their 
lighter counterparts, and Terminal ctrl`'s basic colors. The 
ANSI colors and their lighter counterparts are assumed to be 
constant. Therefore they are not auto`-adjusted to OS theme. 
It is up to client code to change this behavior, if required. 
Note that this rule does not apply to the Terminal ctrl`'s default 
ink, paper, and selection colors.&]
[s0;l288;i1120;b17;a17;O9;:TerminalCtrl`:`:COLOR`_BLACK:~~~.1408;%- [*C@3 COLOR`_BLACK]-|
Black&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_RED:%- [*C@3 COLOR`_RED]-|Red&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_GREEN:%- [*C@3 COLOR`_GREEN]-|Green&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_YELLOW:%- [*C@3 COLOR`_YELLOW]-|Yellow&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_BLUE:%- [*C@3 COLOR`_BLUE]-|Blue&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_MAGENTA:%- [*C@3 COLOR`_MAGENTA]-|Magenta&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_CYAN:%- [*C@3 COLOR`_CYAN]-|Cyan&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_WHITE:%- [*C@3 COLOR`_WHITE]-|White&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTBLACK:%- [*C@3 COLOR`_LTBLACK]-|Black&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTRED:%- [*C@3 COLOR`_LTRED]-|LtRed&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTGREEN:%- [*C@3 COLOR`_LTGREEN]-|LtGreen&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTYELLOW:%- [*C@3 COLOR`_LTYELLOW]-|LtYellow&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTBLUE:%- [*C@3 COLOR`_LTBLUE]-|LtBlue&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTMAGENTA:%- [*C@3 COLOR`_LTMAGENTA]-|LtMagenta&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTCYAN:%- [*C@3 COLOR`_LTCYAN]-|LtCyan&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_LTWHITE:%- [*C@3 COLOR`_LTWHITE]-|White&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_INK:%- [*C@3 COLOR`_INK]-|SColorText.&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_INK`_SELECTED:%- [*C@3 COLOR`_INK`_SELECTED]-|SCol
orHighlightText.&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_PAPER:%- [*C@3 COLOR`_PAPER]-|SColorPaper.&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_PAPER`_SELECTED:%- [*C@3 COLOR`_PAPER`_SELECTED]-|
SColorHighlight.&]
[s7;i1120;a17;:TerminalCtrl`:`:COLOR`_ANNOTATION`_UNDERLINE:%- [*C@3 COLOR`_ANNOTATION`_
UNDERLINE]-|SYellow.&]
[s7;i1120;a17;:TerminalCtrl`:`:MAX`_COLOR`_COUNT:%- [*C@3 MAX`_COLOR`_COUNT]-|Maximum 
number of colors in the color stack.&]
[s2;%- See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:SetColor`(int`,Upp`:`:Color`)^ S
etColor()], [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:SetRefreshColor`(int`,Upp`:`:Color`)^ S
etRefreshColor()].&]
[s3;%- &]
[s4; &]
[s0;%- enum_[* CaretStyles]&]
[s2;b17;a17; Constants used for manipulating the text cursor`'s visual 
appearance.&]
[s7;i1120;a17;:TerminalCtrl`:`:Caret`:`:BLOCK: [%-*C@3 Caret`::BLOCK]-|Block 
cursor style.&]
[s7;i1120;a17;:TerminalCtrl`:`:Caret`:`:BEAM: [%-*C@3 Caret`::BEAM]-|Beam 
cursor style.&]
[s7;i1120;a17;:TerminalCtrl`:`:Caret`:`:UNDERLINE: [%-*C@3 Caret`::UNDERLINE]-|Underline 
cursor style.&]
[s2; See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:SetCursorStyle`(int`,bool`)^ S
etCursorStyle()],[^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:GetCursorStyle`(`)const^  
GetCursorStyle()].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenResize:%- [_^Upp`:`:Event^ Event]<>_[* WhenResize]&]
[s2; This event is dispatched when the terminal is resized.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenSetSize:%- [_^Upp`:`:Event^ Event]<[_^Upp`:`:Size^ Size]>
_[* WhenSetSize]&]
[s2; This event is dispatched when the host attempts to resize the 
terminal. It passes the desired window size to client in a pre`-calculated 
form (in pixels), taking into account the TerminalCtrl`'s current 
cell size, and child frames, if any. This size information can 
be directly used with, e.g., SetRect() method. The difference 
between this event and [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenWindowGeometryChange^ W
henWindowGeometryChange] event is that the latter is a part of 
xterm`'s window ops extensions and may not be supported by some 
applications, while this event has been around since DEC VT100.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenBell:%- [_^Upp`:`:Event^ Event]<>_[* WhenBell]&]
[s2; This event is dispatched when the host attempts to notify the 
user of any action, by playing a sound or flashing the screen, 
etc.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenTitle:%- [_^Upp`:`:Event^ Event]<[_^Upp`:`:String^ String
]>_[* WhenTitle]&]
[s2; This event is dispatched when the host attempts to set or change 
the window title.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenOutput:%- [_^Upp`:`:Event^ Event]<[_^Upp`:`:String^ Strin
g]>_[* WhenOutput]&]
[s2; This event is the preferred output method of TerminalCtrl. User 
input (or terminal output) is passed onto a pty or any other 
process, using this event.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenScroll:%- Event<> [* WhenScroll]&]
[s2; This event is dispatched when the content of TerminalCtrl is 
scrolled. .&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenLED:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) int], 
[@(0.0.255) bool]>_[* WhenLED]&]
[s2; This event is dispatched when the host attempts to toggle key 
locks and their LEDs. This is a DEC VT100 specific event and 
not widely supported. First argument is the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:LED`_NUMLOCK^ c
onstant identifying the LED(s)]. Second argument is the toggle. 
True when a LED is switched on.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenBar:%- [_^Upp`:`:Event^ Event]<Bar[@(0.0.255) `&]>_[* WhenB
ar]&]
[s2; This event is dispatched when user clicks the terminal widget 
with the right mouse button.  It is assigned with the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:StdBar`(Upp`:`:Bar`&`)^ S
tdBar] method on construction. But client code can use this event 
to set, change or completely disable the context menu by setting 
it to Null. Note that when the mouse tracking mode is activated 
the context menu is not available.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenClip:%- [_^Upp`:`:Gate^ Gate]<PasteClip[@(0.0.255) `&]>_[* W
henClip]&]
[s2; This event is dispatched right [/ after ]TerminalCtrl accepts 
a clip for paste or drop operation. In this way, client code 
can examine the content of the clip and reject it if it is not 
suitable for the pending operation. There are some important 
points to note here:&]
[s2; &]
[s2;i150;O9; 1) TerminalCtrl accepts only plain text and OS file 
URIs as valid source clips. It automatically encodes them into 
either the overriding target charset or the relevant g`-set, 
if the legacy charset support is enabled. However, WhenClip event 
presents the client code with the `"raw`" clip content, not with 
the encoded final product.&]
[s2;i150;O9; &]
[s2;i150;O9; 2) Returning true enables the control`-byte filtering 
function: This will remove all bytes with value < 32 except the 
whitespace characters, from the clip`'s content. &]
[s2;i150;O9; &]
[s2;i150;O9; 3) Returning false disables the control`-byte filtering 
function. (This is the default behavior.).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenLink:%- [_^Upp`:`:Event^ Event]<_String>_[* WhenLink]&]
[s2; Returns the URI of the selected hyperlink.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenImage:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) const]_Strin
g[@(0.0.255) `&]>_[* WhenImage]&]
[s2; This event is dispatched when the host sends an image `-with 
a recognized inline image format`- to TerminalCtrl. Defining 
this event will switch the terminal to external image rendering 
mode. This allows the client code to handle the incoming image 
in a format agnostic way, using the registered U`+`+ image decoders 
(e.g. the StreamRaster interface.). &]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenMessage:%- Event<[@(0.0.255) const] 
String[@(0.0.255) `&]> [* WhenMessage]&]
[s6;%- This event is a part of ConEmu`'s protocol extensions.&]
[s2; This event is dispatched when the application wants to display 
a message (usually in a [^topic`:`/`/CtrlLib`/src`/MessageBoxes`_en`-us`#Upp`:`:PromptOKCancel`(const char`*`)^ m
essage box] or by other means), depending on the client`-code. 
It passes a reference to the message string.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenDirectoryChange:%- Event<[@(0.0.255) const] 
String[@(0.0.255) `&]> [* WhenDirectoryChange]&]
[s2; This event is dispatched when a working directory change is 
requested (OSC 7 or OSC 9 ; 9 ). It passes a reference to  a 
String as its parameter. The string [/ should ]contain the path 
to the target directory. It is up to the client`-code to determine 
whether tha path is valid.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenBackgroundChange:%- Event<[@(0.0.255) const] 
String[@(0.0.255) `&]> [* WhenBackgroundChange]&]
[s6;%- This event is a part of iTerm2`'s protocol extensions.&]
[s2;%- This event is triggered when the application intends to change 
the background image. It provides a constant reference to the 
file path of the new background image. If the provided path is 
an empty string, the background image should be removed. See 
[^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:NoBackground`(bool`)^ N
oBackground() ]and [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:HasBackground`(`)const^ H
asBackground()] methods.&]
[s2;%- &]
[s2;%- [* Security Note]: Allowing arbitrary file paths may pose a security 
risk. It is strongly recommended that client code prompts for 
user confirmation before applying any changes to ensure safety 
and prevent unauthorized modifications.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenAnnotation:%- Gate<Point, String[@(0.0.255) `&]> 
[* WhenAnnotation]&]
[s2; This event is dispatched when the user wants to add or edit 
an annotation. It passes the mouse position info in screen (workarea) 
coordinates as its first parameter. The second parameter depends 
on the operation. It will be empty (on new annotation) or filled 
with the current annotation (edit). TerminalCtrl will only accept 
the new value of the String if the gate returns true.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenSelectorCustomKey:%- Gate<dword> 
[* WhenSelectorCustomKey]&]
[s0;l288; This event is triggered during key scanning in selector 
mode, following the same pattern as [^topic`:`/`/CtrlLib`/src`/Bar`_en`-us`#Bar`:`:Scan`(Callback1`<Bar`&`>`,dword`)^ B
ar`::Scan]. Returning true indicates that the client code has 
handled the key. The event allows client code to define and process 
custom actions while in selector mode. The currently pressed 
key is provided as parameter.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenProgress:%- Event<[@(0.0.255) int], 
[@(0.0.255) int]> [* WhenProgress]&]
[s6;%- This event is a part of ConEmu `& Windows Terminal`'s protocol 
extensions.&]
[s2; This event is dispatched when an application wants to notify 
the user about a progress state of an ongoing operation. It passes 
the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:PROGRESS`_OFF^ P
rogressState constants] as its first parameter. The value of 
the second parameter depends on the value of the first parameter. 
&]
[s2; &]
[s2;i150;O0; If the progress state is [/ normal], then the value will 
be the percentage of the progress , between 0`-100 (inclusive). 
&]
[s2;i150;O0; If the progress state is [/ error ]or [/ warning], then 
the value is optional and may mean an error or warning value 
(depending on the app). &]
[s2;i150;O0; If the progress state is [/ busy], then the value should 
be ignored.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenHighlight:%- Event<VectorMap<[@(0.0.255) int], 
VTLine>[@(0.0.255) `&]> [* WhenHighlight]&]
[s2; If defined, this event will be dispatched before a line is painted. 
It passes a reference to a VectorMap as its parameter. The keys 
of the map represent the vertical position(s) of the line (row) 
in the buffer and the values represent the corresponding line(s) 
as 0`-based indices: If the map contains multiple lines (i.e. 
count > 1), they should be treated as a [/ wrapped], single and 
contiguous line. The main purpose of this event is to allow custom 
cell highlighting by the client code.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenWindowMinimize:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) boo
l]>_[* WhenWindowMinimize]&]
[s6;%- This event is a part of xterm`'s window ops extension.&]
[s2; This event is dispatched when the host attempts to minimize 
or unminimize the terminal`'s main window. True means minimize, 
false means unminimize.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenWindowMaximize:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) boo
l]>_[* WhenWindowMaximize]&]
[s6; This event is a part of xterm`'s window ops extension.&]
[s2; This event is dispatched when the host attempts to maximize 
or unmaximize the terminal`'s window. True means maximize, false 
means unmaximize.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenWindowFullScreen:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) i
nt]>_[* WhenWindowFullScreen]&]
[s6;%- This event is a part of xterm`'s window ops extension.&]
[s2; This event is dispatched when the host attempts to put the terminal 
into full screen or overlapping (normal) mode. This event passes 
an integer number that can take one of the three values: [*@3 1] 
for full screen, [*@3 0] for toggle screen, and [*@3 `-1] for no 
full screen.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenWindowGeometryChange:%- [_^Upp`:`:Event^ Event]<[_^Upp`:`:Rect^ R
ect]>_[* WhenWindowGeometryChange]&]
[s6;%- This event is a part of xterm`'s window ops extension.&]
[s2; This event is dispatched when the host requests a change in 
TerminalCtrl`'s window geometry, such as a move or resize operation. 
It passes the desired window dimensions to client in a pre`-calculated 
form (as a rectangle of pixels), taking into account the TerminalCtrl`'s 
current cell size, and child frames, if any. This rectangle can 
be directly used with, e.g., SetRect() method. The difference 
between this event and [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenSetSize^ W
henSetSize] event is that the former is a part of xterm`'s window 
ops extensions and may not be supported by some applications, 
while the latter has been around since VT100. Note that the calculated 
window rectangle won`'t probably be 100% accurate, but `"accurate 
enough`", due to different behavior of the underlying window 
managers.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WhenApplicationCommand:%- [_^Upp`:`:Event^ Event]<[@(0.0.255) c
onst]_String[@(0.0.255) `&]>_[* WhenApplicationCommand]&]
[s2; This event is dispatched when an application programming command 
(APC) sequence is received. TerminalCtrl will hand the raw command 
string to client. Useful for application scripting support.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetLevel`(int`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetLevel]([@(0.0.255) int]_[*@3 level])&]
[s2; Sets the device conformance [%-*@3 level]. The default emulation 
level is 4, representing a DEC VT420 `+ various extensions. Returns 
`*this for method chaining. See the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:LEVEL`_0^ c
onformance level constants] for valid values. Note that not all 
features of these conformance levels are supported.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLevel0`(`)const:%- [@(0.0.255) bool]_[* IsLevel0]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl is in VT52 mode.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLevel1`(`)const:%- [@(0.0.255) bool]_[* IsLevel1]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl is emulating [/ at least] a Level 
1 device.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLevel2`(`)const:%- [@(0.0.255) bool]_[* IsLevel2]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl is emulating [/ at least] a Level 
2 device.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLevel3`(`)const:%- [@(0.0.255) bool]_[* IsLevel3]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl  is emulating [/ at least] a Level 
3 device.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLevel4`(`)const:%- [@(0.0.255) bool]_[* IsLevel4]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl  is emulating [/ at least] a Level 
4 device. (Default)&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Set8BitMode`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* Set8BitMode]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Enables or disables 8`-bit output mode. Returns `*this for method 
chaining. Default is 7`-bit output mode. Note that the 8`-bit 
output mode can cause problems in UTF`-8 environments.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:No8BitMode`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* No8BitMode]()&]
[s2; Disables the 8`-bit output mode. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Is8BitMode`(`)const:%- [@(0.0.255) bool]_[* Is8BitMode]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl  is in 8`-bit output mode.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Is7BitMode`(`)const:%- [@(0.0.255) bool]_[* Is7BitMode]()_[@(0.0.255) c
onst]&]
[s2; Returns true if TerminalCtrl  is in 7`-bit output mode. (Default)&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsUtf8Mode`(`)const:%- [@(0.0.255) bool]_[* IsUtf8Mode]()_[@(0.0.255) c
onst]&]
[s2;# Returns true if TerminalCtrl  is in UTF`-8 (unicode) input 
mode. UTF`-8 input mode is enabled by default. If the terminal`'s 
input locale is not CHARSET`_UNICODE or the legacy charsets (g`-sets) 
feature is enabled, then the keyboard and clipboard inputs will 
be translated to/from the designated 8`-bit character set. In 
that case, g`-sets  will have precedence over the current locale 
settings.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HardReset`(`):%- [@(0.0.255) void]_[* HardReset]()&]
[s2; This method will return TerminalCtrl into its initial state. 
This method is meant to be used as a last resort.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SoftReset`(`):%- [@(0.0.255) void]_[* SoftReset]()&]
[s2; Performs a `"soft`" reset by defaulting the terminal modes to 
their to sane values, resetting the page margins, origin mode, 
UDKs, SGR attributes, legacy charsets. Does not clear the history 
buffer or alternate screen.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Write`(const void`*`,int`,bool`):%- [@(0.0.255) void]_[* Writ
e]([@(0.0.255) const]_[@(0.0.255) void]_`*[*@3 data], [@(0.0.255) int]_[*@3 size], 
[@(0.0.255) bool]_[*@3 utf8])&]
[s5;:Upp`:`:TerminalCtrl`:`:Write`(const Upp`:`:String`&`,bool`):%- [@(0.0.255) void]_[* W
rite]([@(0.0.255) const]_[_^Upp`:`:String^ String][@(0.0.255) `&]_[*@3 s], 
[@(0.0.255) bool]_[*@3 utf8]_`=_[@(0.0.255) true])&]
[s5;:Upp`:`:TerminalCtrl`:`:WriteUtf8`(const Upp`:`:String`&`):%- [@(0.0.255) void]_[* Wr
iteUtf8]([@(0.0.255) const]_[_^Upp`:`:String^ String][@(0.0.255) `&]_[*@3 s])&]
[s2; Writes a block of raw [%-*@3 data], or a String containing raw 
data, to the terminal. [%-*@3 utf8] flag can be used to enable 
or disable the UTF`-8 byte processing mode of the parser. UTF`-8 
mode is the default and recommended byte processing mode.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Echo`(const Upp`:`:String`&`):%- [_^Upp`:`:TerminalCtrl^ Te
rminalCtrl][@(0.0.255) `&]_[* Echo]([@(0.0.255) const]_[_^Upp`:`:String^ String][@(0.0.255) `&
]_[*@3 s])&]
[s2; A convenience method similar to the Write() methods. Writes 
a string to the terminal, according to the current byte processing 
mode. Returns `*this for method chaining. This method does not 
use the main sequence parser of TerminalCtrl. It uses a completely 
separate parser, so it will not disrupt the main parser state 
in between multiple calls. However, it can change the state of 
the terminal. Useful for changing the state or modes of the terminal,and 
for printing stuff on display etc. (Similar to sidebanding)&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:History`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* History]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2; Enables or disables the history (scrollback) buffer. Returns 
`*this for method chaining. Disabling the history buffer also 
clears it.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoHistory`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoHistory]()&]
[s2; Disables the history buffer. Same as History(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasHistory`(`)const:%- [@(0.0.255) bool]_[* HasHistory]()_[@(0.0.255) c
onst]&]
[s2; Returns true if the history buffer is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ClearHistory`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ClearHistory]()&]
[s2; Clears the history buffer. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetHistorySize`(int`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetHistorySize]([@(0.0.255) int]_[*@3 sz])&]
[s2; Sets the allowed maximum number of lines stored in the history 
buffer to [%-*@3 sz]. Default is 1024 lines. Returns `*this for 
method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetHistorySize`(`)const:%- [@(0.0.255) int]_[* GetHistorySize
]()_[@(0.0.255) const]&]
[s2; Returns the allowed maximum number of lines stored in the history 
buffer. Default is 1024 lines&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetFont`(Upp`:`:Font`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetFont]([_^Upp`:`:Font^ Font]_[*@3 f])&]
[s2; Sets the font to [%-*@3 f]. This method also adjusts the cell 
padding values and refreshes the ctrl`'s layout. Returns `*this 
for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetFont`(`)const:%- [_^Upp`:`:Font^ Font]_[* GetFont]()_[@(0.0.255) c
onst]&]
[s2; Returns current font.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetPadding`(Upp`:`:Size`):%- [_^Upp`:`:TerminalCtrl^ Termin
alCtrl][@(0.0.255) `&]_[* SetPadding]([_^Upp`:`:Size^ Size]_[*@3 sz])&]
[s2; Adjusts the horizontal and vertical space around the terminal 
cells (in pixels). Returns `*this for method chaining. Automatically 
calls the Layout() method. Minimum and default padding size is 
[C `[0, 0`]]. Maximum padding values can be [C font size `* 2].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetPadding`(`)const:%- [_^Upp`:`:Size^ Size]_[* GetPadding]()
_[@(0.0.255) const]&]
[s2; Returns the current horizontal and vertical cell padding values 
in pixels.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Ink`(Upp`:`:Color`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* Ink]([_^Upp`:`:Color^ Color]_[*@3 c])&]
[s2; Sets the color of text to [%-*@3 c]. Default is [^topic`:`/`/Draw`/src`/Colors`_en`-us`#SColorText`(`)^ S
ColorText]. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Paper`(Upp`:`:Color`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* Paper]([_^Upp`:`:Color^ Color]_[*@3 c])&]
[s2; Sets the color of background to [%-*@3 c] . Default is [^topic`:`/`/Draw`/src`/Colors`_en`-us`#SColorPaper`(`)^ S
ColorPaper]. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SelectionInk`(Upp`:`:Color`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SelectionInk]([_^Upp`:`:Color^ Color]_[*@3 c])&]
[s2; Sets the color of selected text to [%-*@3 c]. Default is [^topic`:`/`/Draw`/src`/Colors`_en`-us`#SColorHighlightText`(`)^ S
ColorHighlightText]. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SelectionPaper`(Upp`:`:Color`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SelectionPaper]([_^Upp`:`:Color^ Color]_[*@3 c])&]
[s2; Sets the color of selected background to [%-*@3 c] . Default is 
[^topic`:`/`/Draw`/src`/Colors`_en`-us`#SColorHighlight`(`)^ SColorHighlight]. 
Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetColor`(int`,Upp`:`:Color`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetColor]([@(0.0.255) int]_[*@3 i], [_^Upp`:`:Color^ Color]_
[*@3 c])&]
[s2; Sets the color at index [%-*@3 i] to [%-*@3 c.] Returns `*this for 
method chaining. This method does not refresh the display. See 
the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:COLOR`_BLACK^ c
olor constants] for the valid range of index [%-*@3 i].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetRefreshColor`(int`,Upp`:`:Color`):%- [@(0.0.255) void]_[* S
etRefreshColor]([@(0.0.255) int]_[*@3 i], [_^Upp`:`:Color^ Color]_[*@3 c])&]
[s2; Sets the color at index [%-*@3 i] to [%-*@3 c] This method refreshes 
the display after setting the new color. See the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:COLOR`_BLACK^ c
olor constants] for the valid range of index [%-*@3 i].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetColor`(int`)const:%- [_^Upp`:`:Color^ Color]_[* GetColor](
[@(0.0.255) int]_[*@3 i])_[@(0.0.255) const]&]
[s2; Returns the color at index [%-*@3 i]. See the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:COLOR`_BLACK^ c
olor constants] for the valid range of index [%-*@3 i].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:DynamicColors`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* DynamicColors]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Enables or disables xterm`'s dynamic colors feature. Returns 
`*this for method chaining. This feature allows applications 
to override the terminal`'s basic colors (ink, paper, selection, 
and ANSI color table). Disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoDynamicColors`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoDynamicColors]()&]
[s2; Disables the dynamic colors feature. Same as DynamicColors(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasDynamicColors`(`)const:%- [@(0.0.255) bool]_[* HasDynamicC
olors]()_[@(0.0.255) const]&]
[s2; Returns true if xterm`'s dynamic colors feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:LightColors`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* LightColors]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Forces TerminalCtrl to substitute the normal colors (0`-7) with 
their light variants (8`-15). Returns `*this for method chaining. 
This behavior is affected by the client`'s color settings.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoLightColors`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoLightColors]()&]
[s2; Disables color substitution. Same as LightColors(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasLightColors`(`)const:%- [@(0.0.255) bool]_[* HasLightColor
s]()_[@(0.0.255) const]&]
[s2; Returns true if TerminalCtrl is forced to substitute the normal 
colors with their light variants.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:AdjustColors`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* AdjustColors]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; This switch allows TerminalCtrl to adjust the current pen and/or 
paper color to dark themes. It affects only the ANSI color table 
(16 colors). Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoAdjustColors`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoAdjustColors]()&]
[s2; Disables color adjusting. Same as AdjustColors(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasAdjustedColors`(`)const:%- [@(0.0.255) bool]_[* HasAdjuste
dColors]()_[@(0.0.255) const]&]
[s2; Returns true if TerminalCtrl is set to automatically adjust 
its basic color table to dark themes.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ResetColors`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ResetColors]()&]
[s2; Resets the ANSI color table (16 colors palette, and ink/cursor/selection 
colors) to default values. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IntensifyBoldText`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* IntensifyBoldText]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2; Forces TerminalCtrl to use light colors (8 `-15) for bold text. 
Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoIntensifyBoldText`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoIntensifyBoldText]()&]
[s2; Disables intensifying of the bold text. Same as IntensifyBoldText(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasIntensifiedBoldText`(`)const:%- [@(0.0.255) bool]_[* HasIn
tensifiedBoldText]()_[@(0.0.255) const]&]
[s2; Returns true when TerminalCtrl is set to use light colors (8`-15) 
for bold text.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BlinkingText`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* BlinkingText]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Enables or disables blinking text. Blinking text is enabled 
by default. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoBlinkingText`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoBlinkingText]()&]
[s2; Disables blinking text. Same as BlinkingText(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasBlinkingText`(`)const:%- [@(0.0.255) bool]_[* HasBlinkingT
ext]()_[@(0.0.255) const]&]
[s2; Returns true if the blinking text feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BlinkInterval`(int`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* BlinkInterval]([@(0.0.255) int]_[*@3 ms])&]
[s2; Sets the text blink interval to [%-*@3 ms] . Default is 500 ms. 
It can be any value between 100 ms and 60000 ms. Returns `*this 
for method chaining.&]
[s3; &]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetCursorStyle`(int`,bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetCursorStyle]([@(0.0.255) int]_[*@3 style], 
[@(0.0.255) bool]_[*@3 blink]_`=_[@(0.0.255) true])&]
[s2; Sets the visual [%-*@3 style] of the text cursor. See the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:Caret`:`:BLOCK^ c
aret style constants] for valid values. Cursor will blink if 
the [%-*@3 blink] argument is true. Returns `*this for method chaining. 
&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetCursorStyle`(`)const:%- [@(0.0.255) int]_[* GetCursorStyle
]()_[@(0.0.255) const]&]
[s2; Returns the current visual style of the text cursor. See the 
[^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#TerminalCtrl`:`:Caret`:`:BLOCK^ c
aret style constants] for valid values.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BlockCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* BlockCursor]([@(0.0.255) bool]_[*@3 blink]_`=_[@(0.0.255) tr
ue])&]
[s2; Sets a blinking or steady rectangular cursor. Returns `*this 
for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BeamCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* BeamCursor]([@(0.0.255) bool]_[*@3 blink]_`=_[@(0.0.255) tru
e])&]
[s2; Sets a blinking or steady beam cursor. Returns `*this for method 
chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:UnderlineCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* UnderlineCursor]([@(0.0.255) bool]_[*@3 blink]_`=_[@(0.0.255) t
rue])&]
[s2; Sets a blinking or steady underscore cursor. Returns `*this 
for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BlinkingCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* BlinkingCursor]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tru
e])&]
[s2; Enables or disables blinking cursor. Returns `*this for method 
chaining. &]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoBlinkingCursor`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoBlinkingCursor]()&]
[s2; Disables blinking cursor. Same as BlinkingCursor(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsCursorBlinking`(`)const:%- [@(0.0.255) bool]_[* IsCursorBli
nking]()_[@(0.0.255) const]&]
[s2; Returns true if the cursor is blinking.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:LockCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* LockCursor]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2; Locks or unlocks the current cursor style, preventing or allowing 
any application to change the cursor attributes. Returns `*this 
for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:UnlockCursor`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* UnlockCursor]()&]
[s2; Unlocks the cursor style. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsCursorLocked`(`)const:%- [@(0.0.255) bool]_[* IsCursorLocke
d]()_[@(0.0.255) const]&]
[s2; Return true if the current visual style of the text cursor is 
locked.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetCursorPoint`(`)const:%- [_^Upp`:`:Point^ Point]_[* GetCurs
orPoint]()_[@(0.0.255) const]&]
[s2; Returns the top`-left corner of the text cursor position in 
pixels ([/ not] of the caret rectangle but of the cell in which 
the visual caret resides). Note that this method calculates the 
scoll position if the terminal has history buffer, so the returned 
vertical value may be out of ctrl`'s vertical coordinates, depending 
on the actual scoll position.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoBackground`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoBackground]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Enables or disables transparent mode. When enabled, the background 
is not painted and transparency flag is set, allowing client 
code to provide any background it needs. Returns `*this for method 
chaining. See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenBackgroundChange^ W
henBackgroundChange] event.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasBackground`(`)const:%- [@(0.0.255) bool]_[* HasBackground](
)_[@(0.0.255) const]&]
[s2; Returns true if the background transparency is disabled. See 
[^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenBackgroundChange^ W
henBackgroundChange] event.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ShowSizeHint`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ShowSizeHint]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Shows or hides the size hint. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HideSizeHint`(`):~~~224;%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* HideSizeHint]()&]
[s2; Hides the size hint. Same as ShowSizeHint(false). Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasSizeHint`(`)const:%- [@(0.0.255) bool]_[* HasSizeHint]()_[@(0.0.255) c
onst]&]
[s2; Returns true if the size hint is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ShowScrollBar`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ShowScrollBar]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Shows or hides the scrollbar. Returns `*this for method chaining. 
Note that the scrollbar will be disabled when there is no content 
to scroll or the terminal is in alternate screen mode.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HideScrollBar`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* HideScrollBar]()&]
[s2; Hides the scrollbar. Same as ShowScrollBar(false). Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasScrollBar`(`)const:%- [@(0.0.255) bool]_[* HasScrollBar]()
_[@(0.0.255) const]&]
[s2; Returns true if the scrollbar is visible.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ScrollToEnd`(bool`):%- TerminalCtrl[@(0.0.255) `&] 
[* ScrollToEnd]([@(0.0.255) bool] [*@3 b] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2; Enables or disables the automatic scrolling of the page to the 
end of buffer. By defaulti the terminal will scroll to the end 
of page when there is new output. Returns `*this for method chaining. 
Does not affect the alternate buffer.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoScrollToEnd`(`):%- TerminalCtrl[@(0.0.255) `&] 
[* DontScrollToEnd]()&]
[s2; Disables the scrolling of the page to the end of buffer. Same 
as ScrollToEnd(false). Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsScrollingToEnd`(`)const:%- [@(0.0.255) bool] 
[* IsScrollingToEnd]() [@(0.0.255) const]&]
[s2; Returns true if the page scrolls when there is new output.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetScrollBarStyle`(const Upp`:`:ScrollBar`:`:Style`&`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetScrollBarStyle]([@(0.0.255) const]_[_^Upp`:`:ScrollBar`:`:Style^ S
crollBar`::Style][@(0.0.255) `&]_[*@3 s])&]
[s2; Sets the scrollbar`'s visual style to [%-*@3 s]. Returns `*this 
for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:AlternateScroll`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* AlternateScroll]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tr
ue])&]
[s2; Enables or disables xterm`'s alternate scroll feature. Returns 
`*this for method chaining. Alternate scroll mode allows scrolling 
on alternate screen buffer using the mouse wheel. In this mode 
the mouse wheel sends cursor up/down button events instead of 
mouse wheel events.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoAlternateScroll`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoAlternateScroll]()&]
[s2; Disables xterm`'s alternate scroll feature. Same as AlternateScroll(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasAlternateScroll`(`)const:%- [@(0.0.255) bool]_[* HasAltern
ateScroll]()_[@(0.0.255) const]&]
[s2; Returns true if xterm`'s alternate scroll feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:MouseWheelStep`(int`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* MouseWheelStep]([@(0.0.255) int]_[*@3 lines])&]
[s2; Sets the mouse wheel steps to [%-*@3 lines]. Default value is 
determined by the OS. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetMouseWheelStep`(`)const:%- [@(0.0.255) int]_[* GetMouseWhe
elStep]()_[@(0.0.255) const]&]
[s2; Returns the amount of mouse wheel step (in lines).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:AutoHideMouseCursor`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* AutoHideMouseCursor]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2; Enables or disables the mouse cursor auto hide feature. When 
enabled the mouse cursor will be automatically hidden while typing 
text. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoAutoHideMouseCurosr`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoAutoHideMouseCurosr]()&]
[s2; Disables the mouse cursor auto hide feature. Same as AutoHideMouseCursor(false).
 Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsMouseCursorAutoHidden`(`)const:%- [@(0.0.255) bool]_[* IsMo
useCursorAutoHidden]()_[@(0.0.255) const]&]
[s2; Returns true if the mouse cursor auto hide feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:KeyNavigation`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* KeyNavigation]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Enables or disables the cursor key navigation mode. Returns 
`*this for method chaining. In this mode the cursor keys (CTRL 
`+ SHIFT `+ `[Up/Down, Left/Right, Page Up/Down, Home/End`]) 
can be used to navigate through the history buffer. This mode 
requires the history buffer to be enabled.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoKeyNavigation`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoKeyNavigation]()&]
[s2; Disables cursor key navigation. Same as KeyNavigation(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasKeyNavigation`(`)const:%- [@(0.0.255) bool]_[* HasKeyNavig
ation]()_[@(0.0.255) const]&]
[s2; Returns true if cursor key navigation mode is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImages`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* InlineImages]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Enables or disables the inline images support of TerminalCtrl 
as a whole. Returns `*this for method chaining. When enabled, 
terminal will attempt to display every inline image it recognizes. 
Currently [^https`:`/`/en`.wikipedia`.org`/wiki`/Sixel`?oldformat`=true^ sixel], 
JPG, PNG, and TIFF formatted images are recognized. This feature 
is disabled by default.  Inline images can be handled both internally, 
as embedded images, or externally, by handing the image data 
to client code for rendering and viewing. See also [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenImage^ W
henImage] event. &]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoInlineImages`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoInlineImages]()&]
[s2; Disables the inline images support of TerminalCtrl. Returns 
`*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasInlineImages`(`)const:%- [@(0.0.255) bool]_[* HasInlineIma
ges]()_[@(0.0.255) const]&]
[s2; Returns true if [/ at least one] of the inline image protocols 
is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SixelGraphics`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SixelGraphics]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Individually enables or disables [^https`:`/`/en`.wikipedia`.org`/wiki`/Sixel`?oldformat`=true^ s
ixel graphics]. Returns `*this for method chaining. This feature 
is disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoSixelGraphics`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoSixelGraphics]()&]
[s2; Disables [^https`:`/`/en`.wikipedia`.org`/wiki`/Sixel`?oldformat`=true^ sixel 
graphics]. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasSixelGraphics`(`)const:%- [@(0.0.255) bool]_[* HasSixelGra
phics]()_[@(0.0.255) const]&]
[s2; Returns true if [^https`:`/`/en`.wikipedia`.org`/wiki`/Sixel`?oldformat`=true^ six
el graphics] is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:JexerGraphics`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* JexerGraphics]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Individually enables or disables [^https`:`/`/gitlab`.com`/klamonte`/jexer`/`-`/wiki`_pages`/jexer`-images^ j
exer inline images protocol]. This protocol allows TerminalCtrl 
to display any raster image format that is supported by Ultimate`+`+, 
including, but not limited to, JPG, PNG, TIFF. Returns `*this 
for method chaining. This feature is disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoJexerGraphics`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoJexerGraphics]()&]
[s2; Disables [^https`:`/`/gitlab`.com`/klamonte`/jexer`/`-`/wiki`_pages`/jexer`-images^ j
exer inline images protocol]. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasJexerGraphics`(`)const:%- [@(0.0.255) bool]_[* HasJexerGra
phics]()_[@(0.0.255) const]&]
[s2; Returns true if [^https`:`/`/gitlab`.com`/klamonte`/jexer`/`-`/wiki`_pages`/jexer`-images^ j
exer inline images protocol] is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:iTerm2Graphics`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* iTerm2Graphics]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tru
e])&]
[s2; Individually enables or disables [^https`:`/`/iterm2`.com`/documentation`-images`.html^ i
Term2`'s inline images protocol]. This protocol allows TerminalCtrl 
to display any raster image format that is supported by Ultimate`+`+, 
including, but not limited to, JPG, PNG, TIFF. Returns `*this 
for method chaining. This feature is disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoiTerm2Graphics`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoiTerm2Graphics]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2;%- [%%  ][@N Disables ][^https`:`/`/iterm2`.com`/documentation`-images`.html^@N iTerm2`'
s inline images protocol][@N . Returns `*this for method chaining.]&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasiTerm2Graphics`(`)const:%- [@(0.0.255) bool]_[* HasiTerm2G
raphics]()_[@(0.0.255) const]&]
[s2; Return true if [%-^https`:`/`/iterm2`.com`/documentation`-images`.html^@N iTerm2`'
s inline images protocol] is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Hyperlinks`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* Hyperlinks]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2; Enables or disables hyperlinks. Returns `*this for method chaining. 
At the moment, TerminalCtrl only allows text`-based hyperlinks. 
And for security reasons, only the [^https`:`/`/gist`.github`.com`/egmontkob`/eb114294efbcd5adb1944c9f3cb5feda^ e
xplicit hyperlinks] protocol (OSC 8) is supported. This feature 
is disabled by default. &]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoHyperlinks`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoHyperlinks]()&]
[s2; Disables hyperlinks. Same as Hyperlinks(false). Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasHyperlinks`(`)const:%- [@(0.0.255) bool]_[* HasHyperlinks](
)_[@(0.0.255) const]&]
[s2; Returns true if the [^https`:`/`/gist`.github`.com`/egmontkob`/eb114294efbcd5adb1944c9f3cb5feda^ e
xplicit hyperlinks] protocol is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Annotations`(bool`):%- TerminalCtrl[@(0.0.255) `&] 
[* Annotations]([@(0.0.255) bool] [*@3 b] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2; Enables or disables annotations. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoAnnotations`(`):%- TerminalCtrl[@(0.0.255) `&] 
[* NoAnnotations]()&]
[s2; Disables annotations. Returns `*this for method chaining. .&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasAnnotations`(`)const:%- [@(0.0.255) bool] 
[* HasAnnotations]() [@(0.0.255) const]&]
[s2; Return true if the annotations feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SemanticInformation`(bool`):%- TerminalCtrl[@(0.0.255) `&] 
[* SemanticInformation]([@(0.0.255) bool] [*@3 b] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2;%- Enables or disables [^https`:`/`/gitlab`.freedesktop`.org`/Per`_Bothner`/specifications`/blob`/master`/proposals`/semantic`-prompts`.md^ s
emantic information] (also known as [/ semantic prompts]). When 
used with a supporting shell script, this protocol enables a 
clear separation between the prompt, input, and output sections 
of terminal output. Returns `*this for method chaining.&]
[s2;%- &]
[s2;i150;O0;%- TerminalCtrl currently supports only a minimal—but 
reasonable—subset of this protocol. This may change in the 
future.&]
[s2;i150;O0;%- TerminalCtrl does not process or display semantic 
information by itself. Instead, it is up to the client code to 
make use of the protocol, typically in combination with features 
like cell highlighting or search functionality.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoSemanticInformation`(`):%- TerminalCtrl[@(0.0.255) `&] 
[* NoSemanticInformation]()&]
[s2;%- Disables [^https`:`/`/gitlab`.freedesktop`.org`/Per`_Bothner`/specifications`/blob`/master`/proposals`/semantic`-prompts`.md^ s
emantic information] (also known as [/ semantic prompts])[%% . ]Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasSemanticInformation`(`)const:%- [@(0.0.255) bool] 
[* HasSemanticInformation]() [@(0.0.255) const]&]
[s2;%- [%% Returns true if  .][^https`:`/`/gitlab`.freedesktop`.org`/Per`_Bothner`/specifications`/blob`/master`/proposals`/semantic`-prompts`.md^ s
emantic information] (also known as [/ semantic prompts]) is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ReverseWrap`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ReverseWrap]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])
&]
[s2; Enables or disables reverse wrap mode. Disabled by default. 
Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoReverseWrap`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoReverseWrap]()&]
[s2; Disables reverse wrap mode. Same as ReverseWrap(false). Returns 
`*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasReverseWrap`(`)const:%- [@(0.0.255) bool]_[* HasReverseWra
p]()_[@(0.0.255) const]&]
[s2; Returns true if reverse wrap mode is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WindowReports`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* WindowReports]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Enables or disables terminal window reports. This extensions 
is a part of xterm`'s window ops feature. Returns `*this for 
method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoWindowReports`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoWindowReports]()&]
[s2; Disables the terminal window reports. Same as WindowReports(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasWindowReports`(`)const:%- [@(0.0.255) bool]_[* HasWindowRe
ports]()_[@(0.0.255) const]&]
[s2; Returns true if xterm`'s window reports feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WindowActions`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* WindowActions]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true
])&]
[s2; Enables or disables terminal window actions. This extensions 
is a part of xterm`'s window ops feature. Returns `*this for 
method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoWindowActions`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoWindowActions]()&]
[s2; Disables the terminal window actions. Same as WindowActions(false). 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasWindowActions`(`)const:%- [@(0.0.255) bool]_[* HasWindowAc
tions]()_[@(0.0.255) const]&]
[s2; Returns true if xterm`'s window actions feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:WindowOps`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* WindowOps]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2; Enables or disables xterm`'s window ops feature as a whole. 
Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoWindowOps`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoWindowOps]()&]
[s2; Disables xterm`'s window ops feature as a whole. Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasWindowOps`(`)const:%- [@(0.0.255) bool]_[* HasWindowOps]()
_[@(0.0.255) const]&]
[s2; Returns true if xterm`'s window actions [/ or] reports feature 
is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PermitClipboardRead`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* PermitClipboardRead]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2;# Enables or disables the clipboard read access for the terminal 
applications that support the clipboard access and manipulation 
protocol. (OSC 52) Returns `*this for method chaining. Note that 
this feature must be handled with care by the client code, as 
it may pose a security threat.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ForbidClipboardRead`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ForbidClipboardRead]()&]
[s2; Disables clipboard read access for the terminal applications 
that support the clipboard access and manipulation protocol. 
(OSC 52). This is the default setting. Returns `*this for method 
chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsClipboardReadPermitted`(`)const:%- [@(0.0.255) bool]_[* IsC
lipboardReadPermitted]()_[@(0.0.255) const]&]
[s2;# Returns true if the clipboard read access is granted to the 
applications that support the clipboard access and manipulation 
protocol.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PermitClipboardWrite`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* PermitClipboardWrite]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2;# Enables or disables the clipboard write access for the terminal 
applications that support the clipboard access and manipulation 
protocol. (OSC 52) Returns `*this for method chaining. Note that 
this feature must be handled with care by the client code, as 
it may pose a security threat.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ForbidClipboardWrite`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ForbidClipboardWrite]()&]
[s2; Disables clipboard write access for the terminal applications 
that support the clipboard access and manipulation protocol. 
(OSC 52). This is the default setting. Returns `*this for method 
chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsClipboardWritePermitted`(`)const:%- [@(0.0.255) bool]_[* Is
ClipboardWritePermitted]()_[@(0.0.255) const]&]
[s2;# Returns true if the clipboard write access is granted to the 
applications that support the clipboard access and manipulation 
protocol.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PermitClipboardAccess`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* PermitClipboardAccess]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2;# Enables or disables the clipboard access and manipulation protocol 
(OSC 52) as a whole. Returns `*this for method chaining. This 
protocol grants clipboard read and write access to the terminal 
applications that support this feature. Note that this feature 
must be handled with care by the client code, as it may pose 
a security threat.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ForbidClipboardAccess`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* ForbidClipboardAccess]()&]
[s2; Disables the clipboard access and manipualtion protocol (OSC 
52) as a whole. Same ae PermitClipboardAccess(false). This is 
the default setting. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsClipboardAccessPermitted`(`)const:%- [@(0.0.255) bool]_[* I
sClipboardAccessPermitted]()_[@(0.0.255) const]&]
[s2; Returns true if the clipboard access and manipulation protocol 
is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NotifyProgress`(bool`):%- TerminalCtrl[@(0.0.255) `&] 
[* NotifyProgress]([@(0.0.255) bool] [*@3 b] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2; Enables or disables [^https`:`/`/learn`.microsoft`.com`/en`-us`/windows`/terminal`/tutorials`/progress`-bar`-sequences^ C
onEmu/Windows terminal`'s progress notification protocol ](OSC 
9 ;4). Returns `*this for method chaining.&]
[s2; See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenProgress^ W
henProgress]&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoNotifyProgress`(`):%- TerminalCtrl[@(0.0.255) `&] 
[* NoNotifyProgress]()&]
[s2; Disables [^https`:`/`/learn`.microsoft`.com`/en`-us`/windows`/terminal`/tutorials`/progress`-bar`-sequences^ C
onEmu/Windows terminal`'s progress notification protocol] (OSC 
9 ;4). Returns `*this for method chaining.&]
[s2; See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenProgress^ W
henProgress]&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsNotifyingProgress`(`)const:%- [@(0.0.255) bool] 
[* IsNotifyingProgress]() [@(0.0.255) const]&]
[s2; Returns true if the progress notification protocol is enabled. 
.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PCStyleFunctionKeys`(bool`):%- [_^Upp`:`:TerminalCtrl^ Term
inalCtrl][@(0.0.255) `&]_[* PCStyleFunctionKeys]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) t
rue])&]
[s2; Enables or disables the PC`-style function keys feature. Enabled 
by default. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoPCStyleFunctionKeys`(`):%- [_^Upp`:`:TerminalCtrl^ Termin
alCtrl][@(0.0.255) `&]_[* NoPCStyleFunctionKeys]()&]
[s2; Disables the PC`-style function keys feature. Same as PCStyleFunctionKeys(false)
. Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasPCStyleFunctionKeys`(`)const:%- [@(0.0.255) bool]_[* HasPC
StyleFunctionKeys]()_[@(0.0.255) const]&]
[s2; Returns true if the PC`-style function keys feature is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:UDK`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* UDK]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Enables or disables DEC`'s user defined function keys feature. 
Returns `*this for method chaining. UDK is disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoUDK`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoUDK]()&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Disables the DEC`'s user defined function keys feature. Same 
as UDK(false). Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:HasUDK`(`)const:%- [@(0.0.255) bool]_[* HasUDK]()_[@(0.0.255) c
onst]&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Returns true if UDK is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:LockUDK`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* LockUDK]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Locks or unlocks the current user defined function keys. Returns 
`*this for method chaining. UDK is locked by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:UnlockUDK`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* UnlockUDK]()&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Unlocks the user defined function keys so that they can be programmed 
by the applications. Same as LockUDK(false). Returns `*this for 
method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsUDKLocked`(`)const:%- [@(0.0.255) bool]_[* IsUDKLocked]()_[@(0.0.255) c
onst]&]
[s6;%- Requires at least a level 2 device emulation.&]
[s2; Returns true if UDK is locked.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:DelayedRefresh`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* DelayedRefresh]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tru
e])&]
[s2; Enables or disables buffered display refresh. Returns `*this 
for method chaining. This mode allows TerminalCtrl to delay the 
next display refresh for 16 miliseconds after it receives any 
data, thus allowing the display updates to accummulate. When 
this mode is disabled, each refresh will take place immediately 
after any incoming data is parsed and processed. Delayed refresh 
is enabled by default.&]
[s2; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoDelayedRefresh`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoDelayedRefresh]()&]
[s2; Disables delayed refresh and sets immediate refresh mode. Same 
as DelayedRefresh(false). Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsDelayingRefresh`(`)const:%- [@(0.0.255) bool]_[* IsDelaying
Refresh]()_[@(0.0.255) const]&]
[s2; Returns true if delayed display refresh mode is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:LazyResize`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* LazyResize]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) true])&]
[s2; Enables or disables lazy resize. Returns `*this for method chaining. 
This mode is especially useful for reducing the flicker that 
results from widget/window resizes in environments where the 
I/O latency is relatively high (such as networks). When this 
mode is enabled, the resize request will be sent from TerminalCtrl 
to host 100 miliseconds after the actual page resize occurs. 
This mode is disabled by default.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:NoLazyResize`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* NoLazyResize]()&]
[s2; Disables lazy resize. Same as LazyResize(false). Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsLazyResizing`(`)const:%- [@(0.0.255) bool]_[* IsLazyResizin
g]()_[@(0.0.255) const]&]
[s2; Returns true is lazy resize mode is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetImageDisplay`(const Upp`:`:Display`&`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* SetImageDisplay]([@(0.0.255) const]_[_^Upp`:`:Display^ Dis
play][@(0.0.255) `&]_[*@3 d])&]
[s2; Sets the display to be used with embedded images to [%-*@3 d]. 
Returns `*this for method chaining. Note that the ownership of 
the [^topic`:`/`/Draw`/src`/Display`_en`-us`#Display`:`:class^ Display] 
object is not transferred by this method. TerminalCtrl merely 
stores a pointer to the Display; it is up to client code to keep 
the object alive as long as necessary. See Terminal Displays 
section for more information.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetImageDisplay`(`)const:%- [@(0.0.255) const]_[_^Upp`:`:Display^ D
isplay][@(0.0.255) `&]_[* GetImageDisplay]()_[@(0.0.255) const]&]
[s2; Returns a reference to the current [^topic`:`/`/Draw`/src`/Display`_en`-us`#Display`:`:class^ D
isplay] used to display embedded images (e.g. sixels). See Terminal 
Displays section for more information.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:TreatAmbiguousCharsAsWideChars`(bool`):%- Upp[@(0.0.255) `:
:]TerminalCtrl[@(0.0.255) `&] [* TreatAmbiguousCharsAsWideChars]([@(0.0.255) bool] 
[*@3 b] [@(0.0.255) `=] [@(0.0.255) true])&]
[s2; If enabled, the spacing characters in the East Asian Ambiguous 
(A) category will have a column width of 2. Otherwise the column 
width of ambiguous characters will be 1 (default). Returns `*this 
for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsAmbiguousCharsWide`(`)const:%- [@(0.0.255) bool] 
[* IsAmbiguousCharsWide]() [@(0.0.255) const]&]
[s2; Returns true if the spacing characters in the East Asian Ambiguous 
(A) category have a column width of 2.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetFontSize`(`)const:%- [_^Upp`:`:Size^ Size]_[* GetFontSize](
)_[@(0.0.255) const]&]
[s2; Returns the current font size of the terminal in pixels.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetCellSize`(`)const:%- [_^Upp`:`:Size^ Size]_[* GetCellSize](
)_[@(0.0.255) const]&]
[s2; Returns the current cell size of the terminal in pixels. The 
cell size [/ may ]include additional spaces (like padding, etc.).&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetPageSize`(`)const:%- [_^Upp`:`:Size^ Size]_[* GetPageSize](
)_[@(0.0.255) const]&]
[s2; Returns the current size of the terminal display in cells.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetPageRange`(`)const:%- Tuple<[@(0.0.255) int], 
[@(0.0.255) int]> [* GetPageRange]() [@(0.0.255) const]&]
[s2; Returns the top and bottom position of the visible view. Calculates 
the scrolled position if the view is scrolled..&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PageSizeToClient`(Upp`:`:Size`)const:%- [_^Upp`:`:Size^ Siz
e]_[* PageSizeToClient]([_^Upp`:`:Size^ Size]_[*@3 sz])_[@(0.0.255) const]&]
[s5;:Upp`:`:TerminalCtrl`:`:PageSizeToClient`(int`,int`)const:%- [_^Upp`:`:Size^ Size]_
[* PageSizeToClient]([@(0.0.255) int]_[*@3 col], [@(0.0.255) int]_[*@3 row])_[@(0.0.255) cons
t]&]
[s2; Returns the requested terminal page size in pixels, by multiplying 
the given page size with the size of the current font, and then 
adding the total size of TerminalCtrl`'s child frames (e.g. scrollbar, 
if visible) to the result.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetMinSize`(`)const override:%- [_^Upp`:`:Size^ Size]_[* GetM
inSize]()_[@(0.0.255) const]_override&]
[s2; Returns the minimum size of terminal in pixels. Same as PageSizeToClient(2, 
2).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetStdSize`(`)const override:%- [_^Upp`:`:Size^ Size]_[* GetS
tdSize]()_[@(0.0.255) const]_override&]
[s2; Returns the standard size of terminal in pixels. Same as PageSizeToClient(80, 
24).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetMaxSize`(`)const override:%- [_^Upp`:`:Size^ Size]_[* GetM
axSize]()_[@(0.0.255) const]_override&]
[s2; Returns the maximum size of terminal in pixels. Same as PageSizeToClient(132, 
24). Note that this is just a convenience method. TerminalCtrl 
doesn`'t have a predefined upper size limit.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Copy`(`):%- [@(0.0.255) void]_[* Copy]()&]
[s2; Copies the selection to clipboard.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Paste`(`):%- [@(0.0.255) void]_[* Paste]()&]
[s2; Pastes the clipboard to terminal. The content to be pasted is 
automatically encoded into the target character set. Also it 
can be examined, modified, or rejected by client code, using 
the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:Terminal`:`:WhenClip^ W
henClip] event.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SelectAll`(bool`):%- [@(0.0.255) void]_[* SelectAll]([@(0.0.255) b
ool]_[*@3 history ]`=_[@(0.0.255) false])&]
[s2; Selects the content of the terminal view. If [%-*@3 history] is 
true then the text content of the history buffer will be selected 
as well.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsSelection`(`)const:%- [@(0.0.255) bool]_[* IsSelection]()_[@(0.0.255) c
onst]&]
[s2; Returns true if there is a selection.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetWordSelectionFilter`(Gate`):%- TerminalCtrl[@(0.0.255) `&
] [* SetWordSelectionFilter](Gate<[@(0.0.255) const] VTCell[@(0.0.255) `&]> 
[*@3 filter])&]
[s2; Allows client code to set up a custom filter for word selection. 
[%-*@3 filter] is a callback function that takes a VTCell as its 
parameter and returns a boolean value. Client code should return 
true for the cells that are eligible to be selected and otherwise 
return false. Returns `*this for method chaining. Note that since 
this is a cell level filter, it can also select `"words`" (read: 
continuous blocks of cells) by inspecting the properties of the 
cells. E.g. selecting only italic or bold, or underlined blocks 
etc. is possible.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetWordSelectionFilter`(`)const:%- Gate<[@(0.0.255) const] 
VTCell[@(0.0.255) `&]> [* GetWordSelectionFilter]() [@(0.0.255) const]&]
[s2; Returns a callback of the current word selection filter function. 
See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:SetWordSelectionFilter`(CellFilter`*`)^ S
etWordSelectionFilter] method. .&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Goto`(int`):%- [@(0.0.255) void] [* Goto]([@(0.0.255) int] 
[*@3 pos])&]
[s2; Scrolls into position [%-*@3 pos]. Position is zero`-based. This 
method does nothing if the terminal is switched to the alternate 
page.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Find`(const WString`&`,bool`,Gate`):%- [@(0.0.255) void] 
[* Find]([@(0.0.255) const] WString[@(0.0.255) `&] [*@3 s], [@(0.0.255) bool] 
[*@3 visibleonly] [@(0.0.255) `=] [@(0.0.255) false], Gate<[@(0.0.255) const] 
VectorMap<[@(0.0.255) int], WString>[@(0.0.255) `&], [@(0.0.255) const] 
WString[@(0.0.255) `&]> [*@3 fn])&]
[s5;:Upp`:`:TerminalCtrl`:`:Find`(const WString`&`,int`,int`,bool`,Gate`):%- [@(0.0.255) v
oid] [* Find]([@(0.0.255) const] WString[@(0.0.255) `&] [*@3 s], [@(0.0.255) int] 
[*@3 begin], [@(0.0.255) int] [*@3 end], [@(0.0.255) bool] [*@3 visibleonly] 
[@(0.0.255) `=] [@(0.0.255) false], Gate<[@(0.0.255) const] VectorMap<[@(0.0.255) int], 
WString>[@(0.0.255) `&], [@(0.0.255) const] WString[@(0.0.255) `&]> 
 [*@3 fn])&]
[s2; These methods allow the client code to search for a unicode 
string [%-*@3 s] in the terminal`'s buffer. [%-*@3 visibleonly] toggle 
can be used to restrict the search to the visible screen. Otherwise 
the search will include the history buffer. [%-*@3 begin] and [%-*@3 end] 
parameters are [/ 0`-based] and specify the lower and upper bounds 
of the rows to search. These methods will not directly perform 
any search but call the  [%-*@3 fn ]function for the each line 
(a line can be consisted of multiple rows due to wrapping). Client 
code can add any type of  text searching mechanism by defining 
the [%-*@3 fn ]function. Returning true from [%-*@3 fn ]will cancel 
the search. These methods [/ do ]automatic bounds checking and 
will [/ return immediately ]if a search is already in progress.&]
[s2; &]
[s2; [%-*@3 fn] function passes 2 parameters to the client code. The 
first parameter is a constant reference to a VectorMap. Similar 
to [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenHighlight^ W
henHighlight ]method, the keys of this map represent the vertical 
position(s) of the line (row) in the buffer and the values represent 
the WString version of the corresponding line(s) as 0`-based 
indices: If the map contains multiple rows (i.e. count > 1), they 
should be treated as a [/ wrapped], single and continous line. 
Returning true will halt the search at the current position.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:CoFind`(const WString`&`,bool`,Gate`):%- [@(0.0.255) void] 
[* CoFind]([@(0.0.255) const] WString[@(0.0.255) `&] [*@3 s], [@(0.0.255) bool] 
[*@3 visibleonly] [@(0.0.255) `=] [@(0.0.255) false], Gate<[@(0.0.255) const] 
VectorMap<[@(0.0.255) int], WString>[@(0.0.255) `&], [@(0.0.255) const] 
WString[@(0.0.255) `&]>  [*@3 fn])&]
[s5;:Upp`:`:TerminalCtrl`:`:CoFind`(const WString`&`,int`,int`,bool`,Gate`):%- [@(0.0.255) v
oid] [* CoFind]([@(0.0.255) const] WString[@(0.0.255) `&] [*@3 s], [@(0.0.255) int] 
[*@3 begin], [@(0.0.255) int] [*@3 end], [@(0.0.255) bool] [*@3 visibleonly] 
[@(0.0.255) `=] [@(0.0.255) false], Gate<[@(0.0.255) const] VectorMap<[@(0.0.255) int], 
WString>[@(0.0.255) `&], [@(0.0.255) const] WString[@(0.0.255) `&]> 
 [*@3 fn])&]
[s2; Multithreaded versions of Find methods. These methods allow 
the client code to search for a unicode string [%-*@3 s] in the 
terminal`'s buffer in parallel. [%-*@3 visibleonly] toggle can 
be used to restrict the search to the visible screen. Otherwise 
the search will include the history buffer. [%-*@3 begin] and [%-*@3 end] 
parameters are [/ 0`-based] and specify the lower and upper bounds 
of the rows to search. These methods will not directly perform 
any search but call the  [%-*@3 fn ]function for the each line 
(a line can be consisted of multiple rows due to wrapping). It 
is up to the client code to handle serialization (e.g. using 
mutex).  Client code can add any type of  text searching mechanism 
by defining the [%-*@3 fn ]function. Returning true from [%-*@3 fn 
]will cancel the search. These methods [/ do ]automatic bounds 
checking and will [/ return immediately ]if a search is already 
in progress. Note that for searching short`-ranges (or simple 
searchs, i.e. no regex or complex pattern matching) the single 
threaded Find methods are almost always faster.&]
[s2; &]
[s2; [%-*@3 fn] function passes 2 parameters to the client code. The 
first parameter is a constant reference to a VectorMap. Similar 
to [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:WhenHighlight^ W
henHighlight ]method, the keys of this map represent the vertical 
position(s) of the line (row) in the buffer and the values represent 
the WString version of the corresponding line(s) as 0`-based 
indices: If the map contains multiple rows (i.e. count > 1), they 
should be treated as a [/ wrapped], single and continous line. 
Returning true will halt the search at the current position.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsSearching`(`)const:%- [@(0.0.255) bool] 
[* IsSearching]() [@(0.0.255) const]&]
[s2; Returns true if a search is already in progress.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetMousePagePos`(`)const:%- Point [* GetMousePagePos]() 
[@(0.0.255) const]&]
[s0;l288; Returns the position of mouse relative to the terminal`'s 
page area. Note that the result can be a negative point or point 
outside the page area.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:GetMousePagePosAsIndex`(`)const:%- [@(0.0.255) int] 
[* GetMousePagePosAsIndex]() [@(0.0.255) const]&]
[s2; Returns the position of mouse relative to the terminal`'s page 
area as an [/ index]. Note that the result can be a negative point 
or point outside the page area.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsMouseOverImage`(`)const:%- [@(0.0.255) bool]_[* IsMouseOver
Image]()_[@(0.0.255) const]&]
[s2; Returns true if the mouse pointer is hovering over an inline 
image cell.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsMouseOverHyperlink`(`)const:%- [@(0.0.255) bool]_[* IsMouse
OverHyperlink]()_[@(0.0.255) const]&]
[s2; Returns true if the mouse pointer is hovering over an hyperlink 
cell.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsMouseOverAnnotation`(`)const:%- [@(0.0.255) bool] 
[* IsMouseOverAnnotation]() [@(0.0.255) const]&]
[s2; Return true if the mouse pointer is hovering over an annotated 
cell.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsMouseOverHypertext`(`)const:%- [@(0.0.255) bool] 
[* IsMouseOverHypertext]() [@(0.0.255) const]&]
[s2; Returns true if  the mouse pointer is hovering over of any type 
of hypertext (hyperlink or annotation).&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsTracking`(`)const:%- [@(0.0.255) bool]_[* IsTracking]()_[@(0.0.255) c
onst]&]
[s2; Returns true if mouse tracking mode is enabled.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:OverrideTracking`(dword`):%- TerminalCtrl[@(0.0.255) `&] 
[* OverrideTracking](dword [*@3 modifier])&]
[s2; Allows overriding the mouse tracking mode when the [%-*@3 modifier 
]keys are pressed during any mouse movement or key event. Modifiers 
can be [C K`_SHIFT, K`_CTRL, K`_ALT], or a combination of them. 
The default modifier is the [C K`_SHIFT`|K`_CTRL] key combination. 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:StdBar`(Upp`:`:Bar`&`):~~~384;%- [@(0.0.255) void]_[* StdBar](
[_^Upp`:`:Bar^ Bar][@(0.0.255) `&]_[*@3 menu])&]
[s2; The standard terminal menu. Standard terminal menu consists 
of the standard clipboard actions for text, hyperlinks, and terminal 
specific actions. This menu is completely optional. It can be 
overridden, appended or disabled simply by defining or nullifying 
the [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:Terminal`:`:WhenBar^ W
henBar ]callback.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:EditBar`(Upp`:`:Bar`&`):%- [@(0.0.255) void]_[* EditBar]([_^Upp`:`:Bar^ B
ar][@(0.0.255) `&]_[*@3 menu])&]
[s2; Edit menu consists of standard clipboard actions for text (select/copy/paste), 
and is a part of standard menu. It can also be used separately.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:LinksBar`(Upp`:`:Bar`&`):%- [@(0.0.255) void]_[* LinksBar]([_^Upp`:`:Bar^ B
ar][@(0.0.255) `&]_[*@3 menu])&]
[s2; Links menu consists of standard clipboard actions for hyperlinks 
(copy/open), and is a part of TerminalCtrl`'s standard menu. 
It can also be used separately.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:AnnotationsBar`(Bar`&`):%- [@(0.0.255) void] 
[* AnnotationsBar](Bar[@(0.0.255) `&] [*@3 menu])&]
[s2; Annotations menu consists of standard editing and clipboard 
action (copy) for annotations, and is a part of TerminalCtrl`'s 
standard menu. It can also be used separately.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ImagesBar`(Upp`:`:Bar`&`):%- [@(0.0.255) void]_[* ImagesBar](
[_^Upp`:`:Bar^ Bar][@(0.0.255) `&]_[*@3 menu])&]
[s2; Images menu consists of standard clipboard actions for inline 
images (copy/open), and is a part of TerminalCtrl`'s standard 
menu. It can also be used separately.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:OptionsBar`(Upp`:`:Bar`&`):%- [@(0.0.255) void]_[* OptionsBar
]([_^Upp`:`:Bar^ Bar][@(0.0.255) `&]_[*@3 menu])&]
[s2; Options menu consists of terminal specific actions (read`-only/read`-write 
mode, show/hide scrollbar, etc.), and is a part of standard menu. 
It can also be used separately.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PaintPage`(Upp`:`:Draw`&`):%- [@(0.0.255) void]_[* PaintPage](
[_^Upp`:`:Draw^ Draw][@(0.0.255) `&]_[*@3 w])&]
[s2; Dumps the terminal screen to target [%-*@3 w]. Useful for taking 
screenshots. Note that this method works on WYSIWYG`-basis.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:MetaEscapesKeys`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* MetaEscapesKeys]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tr
ue])&]
[s2; Prefixes the `"Alt`-key`" modified keys with ESC. Returns `*this 
for method chaining. This is the default behaviour.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:MetaShiftsKeys`(bool`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* MetaShiftsKeys]([@(0.0.255) bool]_[*@3 b]_`=_[@(0.0.255) tru
e])&]
[s2; Shifts the codes of `"Alt`-key`" modified keys from 0`-127 to 
128`-255 by adding 128 to them. Returns `*this for method chaining.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:MetaKeyDoesNothing`(`):%- [_^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:class^ T
erminalCtrl][@(0.0.255) `&]_[* MetaKeyDoesNothing]()&]
[s2; Disables shifting and prefixing of the `"Alt`" modified keys. 
Returns `*this for method chaining.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:RefreshDisplay`(`):%- [@(0.0.255) void]_[* RefreshDisplay]()&]
[s2; Refreshes the terminal display. This is the prefered refresh 
method. It refreshes only the damaged lines, and does some extra 
stuff.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:BeginSelectorMode`(`):%- [@(0.0.255) void] 
[* BeginSelectorMode]()&]
[s2; Starts keyboard selection session. Allows users to navigate 
the terminal`'s buffer with keys and select text without using 
a mouse. Plaint text, word and rectangle selections are available. 
TerminalCtrl will be in selector mode unless EndSelectorMode 
method is explicitly called.By default the [*C Escape ]key ends 
the session. See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:EndSelectorMode`(`)^ E
ndSelectorMode], [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:IsSelectorMode`(`)const^ I
sSelectorMode].&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:EndSelectorMode`(`):%- [@(0.0.255) void] 
[* EndSelectorMode]()&]
[s2;  End the selector mode. See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:BeginSelectorMode`(`)^ B
eginSelectorMode], [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:IsSelectorMode`(`)const^ I
sSelectorMode].&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:IsSelectorMode`(`)const:%- [@(0.0.255) bool] 
[* IsSelectorMode]() [@(0.0.255) const]&]
[s2; Returns true if the terminal is in selector mode. See [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:BeginSelectorMode`(`)^ B
eginSelectorMode], [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:TerminalCtrl`:`:EndSelectorMode`(`)^ E
ndSelectorMode].&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Serialize`(Upp`:`:Stream`&`)override:%- [@(0.0.255) void]_[* S
erialize]([_^Upp`:`:Stream^ Stream][@(0.0.255) `&]_[*@3 s])_override&]
[s2; Serializes the current configuration of TerminalCtrl to [%-*@3 s].&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Jsonize`(Upp`:`:JsonIO`&`)override:%- [@(0.0.255) void]_[* Js
onize]([_^Upp`:`:JsonIO^ JsonIO][@(0.0.255) `&]_[*@3 jio])_override&]
[s2; Jsonizes the current configuration of TerminalCtrl to [%-*@3 jio].&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:Xmlize`(Upp`:`:XmlIO`&`)override:%- [@(0.0.255) void]_[* Xmli
ze]([_^Upp`:`:XmlIO^ XmlIO][@(0.0.255) `&]_[*@3 xio])_override&]
[s2; Xmlizes the current configuration of TerminalCtrl to [%-*@3 xio] 
.&]
[s3; &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:ClearImageCache`(`):%- [@(0.0.255) static] 
[@(0.0.255) void]_[* ClearImageCache]()&]
[s2; Clears the shared image data cache.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:SetImageCacheMaxSize`(int`,int`):%- [@(0.0.255) static] 
[@(0.0.255) void]_[* SetImageCacheMaxSize]([@(0.0.255) int]_[*@3 maxsize], 
[@(0.0.255) int]_[*@3 maxcount])&]
[s2; TerminalCtrl uses a [/ shared ]data cache to store its inline 
images. This method sets the maximum size of image data to be 
stored in the shared cache to [%-*@3 maxsize, ]and the maximum 
number of items to [%-*@3 maxcount]. The maximum cache size has 
to be provided in pixels. The default [%-*@3 maxsize ]is [C `[1024 
x 1024 x 4`] x 128] pixels (512 MB), and the default [%-*@3 maxcount] 
is 256.000 entries.&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0; [* Protected Method List]]}}&]
[s3;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PreParse`(`):%- [@(0.0.255) virtual void] 
[* PreParse]()&]
[s2; Called right before the main parser or the echo parser starts 
parsing the input. If the client code overrides this method, 
it must call the base version in the method body.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:PostParse`(`):%- [@(0.0.255) virtual void] 
[* PostParse]()&]
[s2; Called right after the main parser or the echo parser finishes 
parsing the input. If the client code overrides this method, 
it must call the base version in the method body. .&]
[s3;%- &]
[s3;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Constructor Detail]]}}&]
[s3;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:TerminalCtrl`(`):%- [* TerminalCtrl]()&]
[s2; Default constructor.&]
[s3; &]
[s0; &]
[ {{10000@(113.42.0) [s0; [*@7;4 TerminalCtrl`::InlineImage]]}}&]
[s0; &]
[s1;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:struct:%- [@(0.0.255)3 struct][3 _][*3 InlineIma
ge][3 _:_][@(0.0.255)3 public][3 _][*@3;3 ValueType][3 <][*3 InlineImage][3 , 
][@3;3 999][3 , ][_^Upp`:`:Moveable^3 Moveable][3 <][*3 InlineImage][3 >_>_]&]
[s2;# This simple structure represents a single inline image and 
and it is passed on to TerminalCtrl`'s [^topic`:`/`/Terminal`/src`/Upp`_Terminal`_en`-us`#Upp`:`:NormalImageCellDisplay`(`)^ i
mage display].&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:image:%- [_^Upp`:`:Image^ Image]_[* image]&]
[s2; The actual image. Terminal ctrl always passes the full image 
on to its image display. For performance reasons, however, it 
does not paint the image as a whole.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:cellsize:%- [_^Upp`:`:Size^ Size]_[* cellsize]&]
[s2; The size of the full image in cells.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:fontsize:%- [_^Upp`:`:Size^ Size]_[* fontsize]&]
[s2; Current font size in pixels.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:paintrect:%- [_^Upp`:`:Rect^ Rect]_[* paintrec
t]&]
[s2;# This rectangle represents the portion of the full image to 
be painted (in pixels).&]
[s3;%- 1&]
[s4;%- &]
[s5;:Upp`:`:TerminalCtrl`:`:InlineImage`:`:operator Value`(`)const:%- [* operator_Value
]()_[@(0.0.255) const]&]
[s2; Converts the InlineImage structure into a Value.&]
[s3;%- &]
[s0; &]
[ {{10000@(113.42.0) [s0; [*@7;4 Terminal displays]]}}&]
[s0;%- &]
[s2;#%- TerminalCtrl supports [^topic`:`/`/Draw`/src`/Display`_en`-us`#Display`:`:class^ D
isplay] and its possible custom derivatives for displaying specific 
objects. [%% Terminal ctrl merely stores a pointer to the provided 
Display; it is up to client code to keep the display object alive 
as long as necessary. ]Currenlty, only displays for image objects 
are supported. Currently there are two predefined terminal displays.&]
[s0;%- &]
[s4;@(0.0.255)%- &]
[s5;:Upp`:`:NormalImageCellDisplay`(`):%- [@(0.0.255) const]_[_^Upp`:`:Display^ Display][@(0.0.255) `&
]_[* NormalImageCellDisplay]()&]
[s2; The default image cell display used by the Terminal ctrl.&]
[s3;%- &]
[s4;%- &]
[s5;:Upp`:`:ScaledImageCellDisplay`(`):%- [@(0.0.255) const]_[_^Upp`:`:Display^ Display][@(0.0.255) `&
]_[* ScaledImageCellDisplay]()&]
[s2; Automatically rescales the image to fit the current cell dimensions.&]
[s3;%- ]]